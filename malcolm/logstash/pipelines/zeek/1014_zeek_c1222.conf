filter {

  if ([log_source] == "c1222_authentication_value") {
    #############################################################################################################################
    # c1222_authentication_value.log
    #   https://github.com/cisagov/icsnpp-c1222/blob/main/scripts/c1222_types.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_c1222_authentication_value"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][authentication_mechanism]} %{[zeek_cols][indirect_reference]} %{[zeek_cols][octet_aligned]} %{[zeek_cols][c1222_key_id]} %{[zeek_cols][c1222_iv]} %{[zeek_cols][c1221_ident]} %{[zeek_cols][c1221_req]} %{[zeek_cols][c1221_resp]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_c1222_authentication_value"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_c1222_authentication_value"
          init => "@zeek_c1222_authentication_value_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'authentication_mechanism', 'indirect_reference', 'octet_aligned', 'c1222_key_id', 'c1222_iv', 'c1221_ident', 'c1221_req', 'c1221_resp' ]"
          code => "event.set('[zeek_cols]', @zeek_c1222_authentication_value_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_c1222_authentication_value"
      add_field => {"[zeek_cols][service]" => "c1222"}
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "c1222_dereg_reg_service") {
    #############################################################################################################################
    # c1222_dereg_reg_service.log
    #   https://github.com/cisagov/icsnpp-c1222/blob/main/scripts/c1222_types.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_c1222_dereg_reg_service"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][req_resp]} %{[zeek_cols][service_type]} %{[zeek_cols][node_type]} {[zeek_cols][connection_type]} %{[zeek_cols][device_class]} %{[zeek_cols][ap_title]} %{[zeek_cols][electronic_serial_number]} %{[zeek_cols][native_address]} %{[zeek_cols][notification_pattern]} %{[zeek_cols][reg_period]} %{[zeek_cols][reg_delay]} %{[zeek_cols][reg_info]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_c1222_dereg_reg_service"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_c1222_dereg_reg_service"
          init => "@zeek_c1222_dereg_reg_service_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'req_resp', 'service_type', 'node_type', 'connection_type', 'device_class', 'ap_title', 'electronic_serial_number', 'native_address', 'notification_pattern', 'reg_period', 'reg_delay', 'reg_info' ]"
          code => "event.set('[zeek_cols]', @zeek_c1222_dereg_reg_service_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_c1222_dereg_reg_service_commas"
            split => { "[zeek_cols][node_type]" => ","
                      "[zeek_cols][connection_type]" => ","
                      "[zeek_cols][reg_info]" => ","} }
    }
    
    mutate {
      id => "mutate_add_fields_zeek_c1222_dereg_reg_service"
      add_field => {"[zeek_cols][service]" => "c1222"}
      add_tag => [ "ics" ]

    }

  } else if ([log_source] == "c1222_identification_service") {
    #############################################################################################################################
    # c1222_identification_service.log
    #   https://github.com/cisagov/icsnpp-c1222/blob/main/scripts/c1222_types.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_c1222_identification_service"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][req_resp]} %{[zeek_cols][standard]} %{[zeek_cols][version]} %{[zeek_cols][revision]} %{[zeek_cols][security_mechanism]} %{[zeek_cols][nbr_session_supported]} %{[zeek_cols][sessionless_supported]} %{[zeek_cols][device_class]} %{[zeek_cols][device_identity_format]} %{[zeek_cols][device_identity]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_c1222_identification_service"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_c1222_identification_service"
          init => "@zeek_c1222_identification_service_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'req_resp', 'standard', 'version', 'revision', 'security_mechanism', 'nbr_session_supported', 'sessionless_supported', 'device_class', 'device_identity_format', 'device_identity' ]"
          code => "event.set('[zeek_cols]', @zeek_c1222_identification_service_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_c1222_identification_service"
      add_field => {"[zeek_cols][service]" => "c1222"}
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "c1222_logon_security_service") {
    #############################################################################################################################
    # c1222_logon_security_service.log
    #   https://github.com/cisagov/icsnpp-c1222/blob/main/scripts/c1222_types.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_c1222_logon_security_service"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][req_resp]} %{[zeek_cols][service_type]} %{[zeek_cols][user_id]} %{[zeek_cols][password]} %{[zeek_cols][user]} %{[zeek_cols][session_idle_timeout]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_c1222_logon_security_service"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_c1222_logon_security_service"
          init => "@zeek_c1222_logon_security_service_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'req_resp', 'service_type', 'user_id', 'password', 'user', 'session_idle_timeout' ]"
          code => "event.set('[zeek_cols]', @zeek_c1222_logon_security_service_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_c1222_logon_security_service"
      add_field => {"[zeek_cols][service]" => "c1222"}
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "c1222_read_write_service") {
    #############################################################################################################################
    # c1222_read_write_service.log
    #   https://github.com/cisagov/icsnpp-c1222/blob/main/scripts/c1222_types.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_c1222_read_write_service"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][req_resp]} %{[zeek_cols][service_type]} %{[zeek_cols][table_id]} %{[zeek_cols][offset]} %{[zeek_cols][index]} %{[zeek_cols][element_count]} %{[zeek_cols][count_m]} %{[zeek_cols][data]} %{[zeek_cols][chksum]} %{[zeek_cols][octet_count]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_c1222_read_write_service"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_c1222_read_write_service"
          init => "@zeek_c1222_read_write_service_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'req_resp', 'service_type', 'table_id', 'offset', 'index', 'element_count', 'count_m', 'data', 'chksum', 'octet_count' ]"
          code => "event.set('[zeek_cols]', @zeek_c1222_read_write_service_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_c1222_read_write_service_commas"
            split => { "[zeek_cols][count_m]" => ","
                      "[zeek_cols][data]" => ","
                      "[zeek_cols][chksum]" => ","} }
      
    }

    mutate {
      id => "mutate_add_fields_zeek_c1222_read_write_service"
      add_field => {"[zeek_cols][service]" => "c1222"}
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "c1222_resolve_service") {
    #############################################################################################################################
    # c1222_resolve_service.log
    #   https://github.com/cisagov/icsnpp-c1222/blob/main/scripts/c1222_types.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_c1222_resolve_service"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][req_resp]} %{[zeek_cols][ap_title]} %{[zeek_cols][local_address]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_c1222_resolve_service"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_c1222_resolve_service"
          init => "@zeek_c1222_resolve_service_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'req_resp', 'ap_title', 'local_address' ]"
          code => "event.set('[zeek_cols]', @zeek_c1222_resolve_service_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_c1222_resolve_service"
      add_field => {"[zeek_cols][service]" => "c1222"}
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "c1222_service_error") {
    #############################################################################################################################
    # c1222_service_error.log
    #   https://github.com/cisagov/icsnpp-c1222/blob/main/scripts/c1222_types.zeek

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_c1222_service_error_fields"
        rename => { "[zeek_cols][service]" => "[zeek_cols][epsem_service]" }
      }
    } else {
      dissect {
        id => "dissect_zeek_c1222_service_error"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][epsem_service]} %{[zeek_cols][error_code]} %{[zeek_cols][rqtl_max_request_size]} %{[zeek_cols][rstl_max_response_size]} %{[zeek_cols][sigerr_resp]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_c1222_service_error"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_c1222_service_error"
          init => "@zeek_c1222_service_error_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'epsem_service', 'error_code', 'rqtl_max_request_size', 'rstl_max_response_size', 'sigerr_resp' ]"
          code => "event.set('[zeek_cols]', @zeek_c1222_service_error_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_c1222_service_error"
      add_field => {"[zeek_cols][service]" => "c1222"}
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "c1222") {
    #############################################################################################################################
    # c1222.log
    #   https://github.com/cisagov/icsnpp-c1222/blob/main/scripts/c1222_types.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_c1222"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][elements]} %{[zeek_cols][is_encrypted_epsem]} %{[zeek_cols][services]} %{[zeek_cols][aso_context]} %{[zeek_cols][called_ap_title]} %{[zeek_cols][calling_ap_title]} %{[zeek_cols][calling_ae_qualifier]} %{[zeek_cols][mechanism_name]} %{[zeek_cols][calling_auth_value]} %{[zeek_cols][called_ap_invocation_id]} %{[zeek_cols][calling_ap_invocation_id]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_c1222"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_c1222"
          init => "@zeek_c1222_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'elements', 'is_encrypted_epsem', 'services', 'aso_context', 'called_ap_title', 'calling_ap_title', 'calling_ae_qualifier', 'mechanism_name', 'calling_auth_value', 'called_ap_invocation_id', 'calling_ap_invocation_id' ]"
          code => "event.set('[zeek_cols]', @zeek_c1222_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_c1222_commas"
            split => { "[zeek_cols][elements]" => ","
                      "[zeek_cols][services]" => ","
                      "[zeek_cols][calling_ae_qualifier]" => ","} }
    }

    mutate {
      id => "mutate_add_fields_zeek_c1222"
      add_field => {"[zeek_cols][service]" => "c1222"}
      add_tag => [ "ics" ]
    }

  } else  if ([log_source] == "c1222_trace_service") {
    #############################################################################################################################
    # c1222_trace_service.log
    #   https://github.com/cisagov/icsnpp-c1222/blob/main/scripts/c1222_types.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_c1222_trace_service"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][req_resp]} %{[zeek_cols][ap_titles]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_c1222_trace_service"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_c1222_trace_service"
          init => "@zeek_c1222_trace_service_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'req_resp', 'ap_titles' ]"
          code => "event.set('[zeek_cols]', @zeek_c1222_trace_service_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_c1222_trace_service_commas"
          split => { "[zeek_cols][ap_titles]" => ","} }
    }

    mutate {
      id => "mutate_add_fields_zeek_c1222_trace_service"
      add_field => {"[zeek_cols][service]" => "c1222"}
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "c1222_user_information") {
    #############################################################################################################################
    # c1222_user_information.log
    #   https://github.com/cisagov/icsnpp-c1222/blob/main/scripts/c1222_types.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_c1222_user_information"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][indirect_reference_encoding]} %{[zeek_cols][padding]} %{[zeek_cols][mac]} %{[zeek_cols][epsem_control]} %{[zeek_cols][ed_class]} %{[zeek_cols][encrypted_epsem]} %{[zeek_cols][services]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_c1222_user_information"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_c1222_user_information"
          init => "@zeek_c1222_user_information_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'indirect_reference_encoding', 'padding', 'mac', 'epsem_control', 'ed_class', 'encrypted_epsem', 'services' ]"
          code => "event.set('[zeek_cols]', @zeek_c1222_user_information_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_c1222_user_information_commas"
            split => { "[zeek_cols][epsem_control]" => ","
                      "[zeek_cols][services]" => ","} }
    }

    mutate {
      id => "mutate_add_fields_zeek_c1222_user_information"
      add_field => {"[zeek_cols][service]" => "c1222"}
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "c1222_wait_service") {
    #############################################################################################################################
    # c1222_wait_service.log
    #   https://github.com/cisagov/icsnpp-c1222/blob/main/scripts/c1222_types.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_c1222_wait_service"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][req_resp]} %{[zeek_cols][time_s]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_c1222_wait_service"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_c1222_wait_service"
          init => "@zeek_c1222_wait_service_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'req_resp', 'time_s' ]"
          code => "event.set('[zeek_cols]', @zeek_c1222_wait_service_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_c1222_wait_service"
      add_field => {"[zeek_cols][service]" => "c1222"}
      add_tag => [ "ics" ]
    }
  }

}

